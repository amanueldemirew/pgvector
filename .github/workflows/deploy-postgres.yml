name: Deploy PostgreSQL with pgvector

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << 'EOL'
          version: '3.8'

          services:
            postgres:
              image: ankane/pgvector
              container_name: postgres_db
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: postgres
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              restart: unless-stopped

          volumes:
            postgres_data:
          EOL

      - name: Deploy PostgreSQL
        run: docker-compose up -d

      - name: Verify deployment
        run: |
          sleep 10
          docker ps
          docker-compose logs postgres

      - name: Setup ngrok tunnel
        run: |
          # Download and install ngrok directly
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          tar xvzf ngrok-v3-stable-linux-amd64.tgz
          chmod +x ./ngrok

          # Authenticate and start tunnel
          ./ngrok config add-authtoken ${{ secrets.NGROK_TOKEN }}
          ./ngrok tcp 5432 --log=stdout > ngrok.log &
          sleep 5  # Wait for tunnel to establish

          # Display connection info
          echo "Public URL:"
          curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'

      - name: Keep alive
        run: sleep 300 # Keep runner alive for 5 minutes
